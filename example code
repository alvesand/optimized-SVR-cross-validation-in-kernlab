############################################################################################
#Support Vector Regression
############################################################################################
getwd()
dim (X_pe) #SNP matrix 
n=ncol(X_pe) 
K <- as.matrix(mydist(X_pe)) #an optimized function to create the Euclidean distance matrix
K= K^2 
K = K/n

h <- c(seq(0.1, 10, 0.3)) #the set of testing bandwidth parameters 
length(h)
corr <- matrix(0,nrow=length(h),ncol=5)
RMSE <-   matrix(0,nrow=length(h),ncol=5)
r_aj <- matrix(0,nrow=length(h),ncol=5)
corall <- NULL
rmseall <- NULL

#install.packages("kernlab")  
library(kernlab)
K_train <- K
#set.seed(1823)
gp <-as.integer(runif(nrow(K_train),min=1,max=6)) 
table(gp)
getwd()

head(rownames(y_phen))
head(rownames(X_pe))

y_phen$ind =seq(1,dim(y_phen)[1],1)
head(y_phen)

ini_svm=Sys.time()
for (j in 1:length(h)){
  for (i in 1:5){
    holdon <- c(which(gp!=i))
    holdout <- c(which(gp==i))
    K1 <- exp(-h[j]*K_train)
    n1 <- length(holdon)
    trainK <- as.kernelMatrix(K1[holdon,holdon]) 
    e<- 3*sd(y_phen$phen[holdon])*sqrt(log(n1)/n1) #fixed epislon parameter
    c <- c(abs(mean (y_phen$phen[holdon])-3*sd(y_phen$phen[holdon])), abs(mean (y_phen$phen[holdon])+3*sd(y_phen$phen[holdon])))
    C <- max(c) #fixed regularization parameter
    m <- ksvm(trainK, y_phen$phen[holdon], kernel='matrix', type="eps-svr",C=C, e=e, shrinking = T,scaled=T) 
    testK <- as.kernelMatrix(K1[holdout, holdon][,SVindex(m), drop=F])
    preds <- predict(m, testK)
    RMSE[j,i] <- mean((y_phen$phen[holdout]-preds)^2)
    corr[j,i] <- cor (y_phen$phen[holdout],preds)
    #r_aj[j,i] <- corr[j,i]/(mean(sqrt(y_phen$r2_debv)))
    r_aj[j,i] <- cor (y_phen$phen[holdout],preds)/sqrt(0.43)
  
  }    
  print(j)
}
fim_svm=Sys.time()

sd_cor<-NULL
cor_ajus<-NULL
sd_ajus<-NULL
sd_rmse<-NULL
for (j in 1:length(h)){
  corall[j] <- mean (corr[j,])
  sd_cor[j] <- sd(corr[j,])
  cor_ajus[j] <- mean (r_aj[j,])
  sd_ajus[j] <- sd(r_aj[j,])
  rmseall[j] <- mean (RMSE[j,])
  sd_rmse[j] <- sd (RMSE[j,])
}

